name: LEDE-HinLink_H29K-Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds_config/LEDE/HinLink_H29K/feeds.conf.default
  CONFIG_FILE: config/LEDE/HinLink_H29K/.config
  DIY_P1_SH: DIY_Script/LEDE/HinLink_H29K/diy-part1.sh
  DIY_P2_SH: DIY_Script/LEDE/HinLink_H29K/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: \033[1;32m✅ 仓库校验\033[0m
        uses: actions/checkout@v4
        shell: bash
        run: |
          printf "\033[1;32m🔍 校验仓库完整性...\033[0m\n"
          git status

      - name: \033[1;32m✨ 初始化环境\033[0m
        shell: bash
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          printf "\033[1;35m⚙️ 开始清理和安装依赖...\033[0m\n"
          sudo rm -rf /etc/apt/sources.list.d/* \
            /usr/share/dotnet \
            /usr/local/lib/android \
            /opt/ghc \
            /opt/hostedtoolcache/CodeQL
          sudo docker image prune -af
          sudo apt-get -qq update
          sudo apt-get -qq install -y \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext \
            gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 \
            libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev \
            libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
            libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch \
            pkgconf python2.7 python3 python3-pyelftools qemu-utils rsync scons \
            squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget \
            xmlto xxd zlib1g-dev
          sudo apt-get autoremove -qq --purge
          sudo apt-get clean -qq
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir && sudo chown $USER:$GROUPS /workdir
          printf "\033[1;32m✅ 环境初始化完成！\033[0m\n"

      - name: \033[1;32m📊 硬件配置检测\033[0m
        shell: bash
        run: |
          printf "\033[1;31m⚠️ 警告：服务器性能直接影响编译速度，建议选择高性能实例！\033[0m\n"
          printf "\033[1;36m▬▬▬▬▬ CPU 信息 ▬▬▬▬▬\033[0m\n"
          printf "型号: \033[1;33m$(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)\033[0m\n"
          printf "核心数: \033[1;33m$(nproc) 线程\033[0m\n"
          printf "\033[1;36m▬▬▬▬▬ 内存信息 ▬▬▬▬▬\033[0m\n"
          printf "总内存: \033[1;33m$(free -h | awk '/Mem:/ {print $2}')\033[0m\n"
          printf "\033[1;36m▬▬▬▬▬ 磁盘信息 ▬▬▬▬▬\033[0m\n"
          df -Th | sed 's/^/\t/' | sed "s/ / \033[1;33m/g"

      - name: \033[1;32m📥 克隆源码\033[0m
        working-directory: /workdir
        shell: bash
        run: |
          printf "\033[1;35m🔗 克隆 LEDE 主仓库（分支: $REPO_BRANCH）...\033[0m\n"
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH lede
          ln -sf /workdir/lede $GITHUB_WORKSPACE/lede
          printf "\033[1;32m✅ 源码克隆成功！路径: /workdir/lede\033[0m\n"

      - name: \033[1;32m⚡ 加载订阅源\033[0m
        shell: bash
        run: |
          printf "\033[1;35m🔧 加载自定义 feeds.conf 文件...\033[0m\n"
          [ -f "$FEEDS_CONF" ] && cp -v "$FEEDS_CONF" lede/feeds.conf.default
          [ -d "files/LEDE/HinLink_H29K" ] && cp -Rvf files/LEDE/HinLink_H29K/* lede/
          printf "\033[1;35m🚀 执行自定义脚本 $DIY_P1_SH\033[0m\n"
          chmod +x "$DIY_P1_SH"
          cd lede && "$GITHUB_WORKSPACE/$DIY_P1_SH"
          printf "\033[1;32m✅ 订阅源配置完成！\033[0m\n"

      - name: \033[1;32m🔄 更新订阅源\033[0m
        shell: bash
        run: |
          printf "\033[1;35m🔁 更新 feeds...\033[0m\n"
          cd lede && ./scripts/feeds update -a
          [ $? -eq 0 ] && printf "\033[1;32m✅ 更新成功！\033[0m\n" || exit 1

      - name: \033[1;32m📦 安装订阅源\033[0m
        shell: bash
        run: |
          printf "\033[1;35m📥 安装 feeds...\033[0m\n"
          cd lede && ./scripts/feeds install -a
          [ $? -eq 0 ] && printf "\033[1;32m✅ 安装完成！\033[0m\n" || exit 1

      - name: \033[1;32m🔧 加载固件配置\033[0m
        shell: bash
        run: |
          printf "\033[1;35m⚙️ 导入预置配置文件 .config ...\033[0m\n"
          [ -f "$CONFIG_FILE" ] && cp -v "$CONFIG_FILE" lede/.config
          printf "\033[1;35m🚀 执行自定义脚本 $DIY_P2_SH\033[0m\n"
          chmod +x "$DIY_P2_SH"
          cd lede && "$GITHUB_WORKSPACE/$DIY_P2_SH"
          printf "\033[1;32m✅ 配置加载成功！\033[0m\n"

      - name: \033[1;32m📦 下载软件包\033[0m
        id: download-packages
        shell: bash
        run: |
          printf "\033[1;35m⏬ 下载所有软件包...\033[0m\n"
          cd lede
          make defconfig
          make download -j$(($(nproc) * 2)) || make download -j1
          find dl -size -1k -delete
          printf "\033[1;32m✅ 下载完成！\033[0m\n"

      - name: \033[1;32m🔨 编译固件\033[0m
        id: compile-firmware
        shell: bash
        run: |
          printf "\033[1;35m🔥 开始编译（使用 $\033[1;33m$(nproc)\033[1;35m 线程）...\033[0m\n"
          cd lede
          make -j$(nproc) || { 
            printf "\033[1;31m⚠️ 并行编译失败，尝试单线程编译...\033[0m\n" && make -j1 V=s; 
          }
          echo "status=success" >> $GITHUB_OUTPUT
          DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
          echo "DEVICE_NAME=_${DEVICE_NAME}" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          printf "\033[1;32m🎉 固件编译完成！\033[0m\n"

      - name: \033[1;32m📤 上传固件\033[0m
        if: ${{ success() && env.UPLOAD_FIRMWARE == 'true' }}
        uses: actions/upload-artifact@v4
        shell: bash
        with:
          name: OpenWrt-Firmware-${{ env.DEVICE_NAME }}-${{ env.FILE_DATE }}
          path: |
            lede/bin/targets/**/*
            !lede/bin/targets/**/packages
            !lede/bin/targets/**/*.buildinfo
            !lede/bin/targets/**/*.manifest

      - name: \033[1;32m🏷️ 创建 Releases\033[0m
        if: ${{ success() && env.UPLOAD_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: LEDE-H29K-${{ env.FILE_DATE }}
          files: lede/bin/targets/**/*.bin

      - name: \033[1;32m🧹 清理旧数据\033[0m
        shell: bash
        run: |
          printf "\033[1;35m🧽 清理超过 7 天的旧工作流...\033[0m\n"
          gh run list --workflow=$GITHUB_WORKFLOW --json databaseId -q '.[].databaseId' --limit 100 --jq '.[]' \
            | xargs -I {} bash -c "if (( {} < $(date -d '-7 days' +%s) )); then gh run delete {}; fi"
