name: LEDE-HinLink_H29K-Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds_config/LEDE/HinLink_H29K/feeds.conf.default
  CONFIG_FILE: config/LEDE/HinLink_H29K/.config
  DIY_P1_SH: DIY_Script/LEDE/HinLink_H29K/diy-part1.sh
  DIY_P2_SH: DIY_Script/LEDE/HinLink_H29K/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 🔍 校验仓库完整性
      uses: actions/checkout@main

    - name: 🛠️ 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo -e "\033[1;32m✓ 环境初始化完成！\033[0m"

    - name: 📊 服务器资源配置检查
      run: |
        echo -e "\n\033[1;31m⚠ 性能警告：本服务器为共享资源，请勿开启过多插件以免超限！\033[0m"
        echo -e "\n\033[1;36m★ 常见机型参考CPU性能 (降序)：7763 > 8370C > 8272CL > 8171M > E5-2673\033[0m\n"
        echo -e "\033[1;34m══════════════ 硬件详情 ══════════════\033[0m"
        echo -e "\033[1;33m● CPU信息\033[0m"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo "CPU线程数量: $(nproc)"
        echo -e "CPU型号: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c | sed 's/^[ \t]*//')"
        echo -e "\n\033[1;33m● 内存信息\033[0m"
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo -e "\033[1;33m● 存储信息\033[0m"
        echo -e  "物理硬盘数：$(ls /dev/sd* | grep -v [1-9] | wc -l)"
        echo -e "\033[1;37m文件系统      类型  总容量  已用  可用  使用率 挂载点\033[0m"
        df -Th

    - name: 📥 克隆LEDE源码库
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH lede
        ln -sf /workdir/lede $GITHUB_WORKSPACE/lede
        echo -e "\033[1;32m✓ LEDE源码克隆完成！\033[0m"

    - name: 🔩 加载自定义订阅源
      run: |
        [ -e files ] && cp -rf files/LEDE/HinLink_H29K/* lede/
        [ -e files ] && mkdir -p lede/package/feeds/modem && cp -rf files//Modem/quectel_cm_5G lede/package/feeds/modem
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF lede/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd lede
        $GITHUB_WORKSPACE/$DIY_P1_SH
        echo -e "\033[1;32m✓ 自定义订阅源加载完成！\033[0m"

    - name: 🔄 更新拉取源
      run: cd lede && ./scripts/feeds update -a
      echo -e "\033[1;32m✓ 拉取源更新完成！\033[0m"

    - name: 📦 安装拉取源
      run: cd lede && ./scripts/feeds install -a
      echo -e "\033[1;32m✓ 拉取源安装完成！\033[0m"

    - name: 📈 加载自定义配置
      run: |
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" lede/.config
        chmod +x "$DIY_P2_SH"
        cd lede
        "$GITHUB_WORKSPACE/$DIY_P2_SH"
        echo -e "\033[1;32m✓ 自定义配置加载完成！\033[0m"

    - name: ⚡ 下载软件包
      id: package
      run: |
        cd lede
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo -e "\033[1;32m✓ 软件包下载完成！异常小文件已清理\033[0m"

    - name: 🏗️ 编译OpenWrt固件
      id: compile
      run: |
        cd lede
        echo -e "\033[1;33m正在使用 $(nproc) 线程进行编译...\033[0m"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo -e "\033[1;32m✓ 固件编译完成！设备标识已导出\033[0m"

    - name: 📊 检查空间使用情况
      if: (!cancelled())
      run: df -hT
      echo -e "\033[1;32m✓ 空间检查完成！\033[0m"

    - name: 📦 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: lede/bin
      echo -e "\033[1;32m✓ Bin目录上传完成！\033[0m"

    - name: 🗂️ 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd lede/bin/targets/*/*
        rm -rf packages *.buildinfo *.json *.manifest
        rm -rf config.buildinfo
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        echo -e "\033[1;32m✓ 文件整理完成！\033[0m"

    - name: 📦 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
      echo -e "\033[1;32m✓ 固件上传完成！\033[0m"

    - name: 📣 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=LEDE-HinLink_H29K-$(date +"%Y.%m.%d-%H%M%S")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        echo -e "\033[1;32m✓ 发布标签生成完成！\033[0m"

    - name: 📦 上传固件以发布
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
      echo -e "\033[1;32m✓ 固件发布完成！\033[0m"

    - name: 🚮 删除工作流运行
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
      echo -e "\033[1;32m✓ 工作流运行记录删除成功！\033[0m"

    - name: 📁 删除旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 100
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      echo -e "\033[1;32m✓ 旧版本删除成功！\033[0m"
