#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: LEDE-HinLink_H29K-Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds_config/LEDE/HinLink_H29K/feeds.conf.default
  CONFIG_FILE: config/LEDE/HinLink_H29K/.config
  DIY_P1_SH: DIY_Script/LEDE/HinLink_H29K/diy-part1.sh
  DIY_P2_SH: DIY_Script/LEDE/HinLink_H29K/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 校验
      uses: actions/checkout@main
      run: |
        echo -e "\033[1;32m[校验] 开始校验仓库... \033[0m"

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo -e "\033[1;32m[初始化环境] \033[0m"
        echo -e "\033[1;34m  >>> 准备环境... \033[0m"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo -e "\033[1;34m  >>> 环境准备完成！\033[0m"

    - name: 检查服务器配置
      run: |
        echo -e "\033[1;33m[警告] 分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！\033[0m"
        echo -e "\033[1;34m  >>> 已知CPU型号(按性能降序): 7763，8370C，8272CL，8171M，E5-2673 \033[0m\n"
        echo -e "\033[1;32m-------------- -----------CPU信息------------------------------------------\033[0m"
        echo -e "CPU物理数量: \033[1;36m$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)\033[0m"
        echo -e "CPU线程数量: \033[1;36m$(nproc)\033[0m"
        echo -e "CPU核心及版本信息：\033[1;36m$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)\033[0m \n"
        echo -e "\033[1;32m-------------------------------内存信息-------------------------------------------\033[0m"
        echo -e "已安装内存详细信息：\033[1;36m$(sudo lshw -short -C memory | grep GiB)\033[0m \n"
        echo -e "\033[1;32m-----------------------------硬盘信息---------------------------------------------\033[0m"
        echo -e "硬盘数量：\033[1;36m$(ls /dev/sd* | grep -v [1-9] | wc -l)\033[0m"
        echo -e "硬盘详情：\033[1;36m"
        echo "系统空间        类型   总数  已用  可用  使用率"
        df -Th
        echo -e "\033[0m"

    - name: 克隆源代码
      working-directory: /workdir
      run: |
        echo -e "\033[1;32m[克隆源代码] 开始克隆... \033[0m"
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH lede
        ln -sf /workdir/lede $GITHUB_WORKSPACE/lede
        echo -e "\033[1;34m  >>> 源代码克隆完成！\033[0m"

    - name: 加载自定义订阅源
      run: |
        echo -e "\033[1;32m[加载自定义订阅源] 开始加载... \033[0m"
        [ -e files ] && cp -rf files/LEDE/HinLink_H29K/* lede/
        [ -e files ] && mkdir -p lede/package/feeds/modem && cp -rf files//Modem/quectel_cm_5G lede/package/feeds/modem
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF lede/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd lede
        $GITHUB_WORKSPACE/$DIY_P1_SH
        echo -e "\033[1;34m  >>> 自定义订阅源加载完成！\033[0m"

    - name: 更新拉取源
      run: |
        echo -e "\033[1;32m[更新拉取源] 开始更新... \033[0m"
        cd lede && ./scripts/feeds update -a
        echo -e "\033[1;34m  >>> 源更新完成！\033[0m"

    - name: 安装拉取源
      run: |
        echo -e "\033[1;32m[安装拉取源] 开始安装... \033[0m"
        cd lede && ./scripts/feeds install -a
        echo -e "\033[1;34m  >>> 源安装完成！\033[0m"

    - name: 加载自定义配置
      run: |
        echo -e "\033[1;32m[加载自定义配置] 开始加载... \033[0m"
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" lede/.config
        chmod +x "$DIY_P2_SH"
        cd lede
        "$GITHUB_WORKSPACE/$DIY_P2_SH"
        echo -e "\033[1;34m  >>> 自定义配置加载完成！\033[0m"

    - name: 下载软件包
      id: package
      run: |
        echo -e "\033[1;32m[下载软件包] 开始下载... \033[0m"
        cd lede
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo -e "\033[1;34m  >>> 软件包下载完成！\033[0m"

    - name: 编译固件
      id: compile
      run: |
        cd lede
        echo -e "\033[1;32m[编译固件] \033[1;34m$(nproc) \033[1;32m线程开始编译固件，速度与激情，科技的力量！\033[0m"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: (!cancelled())
      run: |
        echo -e "\033[1;32m[检查空间使用情况] 检查磁盘使用率... \033[0m"
        df -hT
        echo -e "\033[1;34m  >>> 空间使用情况检查完成！\033[0m"

    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: lede/bin
      run: |
        echo -e "\033[1;32m[上传bin目录] 开始上传... \033[0m"

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        echo -e "\033[1;32m[整理文件] 开始整理... \033[0m"
        cd lede/bin/targets/*/*
        rm -rf packages *.buildinfo *.json *.manifest
        rm -rf config.buildinfo
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        echo -e "\033[1;34m  >>> 文件整理完成！\033[0m"

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
      run: |
        echo -e "\033[1;32m[上传固件目录] 开始上传... \033[0m"

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo -e "\033[1;32m[生成发布标签] 生成新的发布标签... \033[0m"
        echo "release_tag=LEDE-HinLink_H29K-$(date +"%Y.%m.%d-%H%M%S")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        echo -e "\033[1;34m  >>> 发布标签生成完成！\033[0m"

    - name: 上传固件以发布
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
      run: |
        echo -e "\033[1;32m[上传固件以发布] 上传固件至发布... \033[0m"

    - name: 删除工作流运行
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
      run: |
        echo -e "\033[1;32m[删除工作流运行] 清理旧的工作流运行... \033[0m"

    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 100
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo -e "\033[1;32m[删除旧版本] 清理旧版本... \033[0m"
