# LEDE-HinLink_H29K-Builder
# =========================
# 此工作流程用于构建 OpenWrt 固件，使用 GitHub Actions 自动化构建过程。

name: LEDE-HinLink_H29K-Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  # LEDE 源代码仓库 URL
  REPO_URL: https://github.com/coolsnowwolf/lede
  # LEDE 源代码仓库分支
  REPO_BRANCH: master
  # Feeds.conf.default 文件路径
  FEEDS_CONF: feeds_config/LEDE/HinLink_H29K/feeds.conf.default
  # 配置文件路径
  CONFIG_FILE: config/LEDE/HinLink_H29K/.config
  # DIY Script 第 1 部分路径
  DIY_P1_SH: DIY_Script/LEDE/HinLink_H29K/diy-part1.sh
  # DIY Script 第 2 部分路径
  DIY_P2_SH: DIY_Script/LEDE/HinLink_H29K/diy-part2.sh
  # 是否上传 bin 目录
  UPLOAD_BIN_DIR: false
  # 是否上传固件
  UPLOAD_FIRMWARE: true
  # 是否生成发布标签
  UPLOAD_RELEASE: true
  # 时区
  TZ: Asia/Shanghai

jobs:
  build:
    # 运行于 ubuntu-22.04 环境
    runs-on: ubuntu-22.04

    steps:
    - name: 校验
      # 使用 actions/checkout@main 校验源代码
      uses: actions/checkout@main

    - name: 初始化环境
      # 安装必要的软件包和环境变量
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 删除不需要的文件和目录
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        # 删除多余的 Docker 镜像
        sudo docker image prune --all --force
        # 更新包列表
        sudo -E apt-get -qq update
        # 安装必要的软件包
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        # 删除不需要的软件包
        sudo -E apt-get -qq autoremove --purge
        # 清理包列表
        sudo -E apt-get -qq clean
        # 设置时区
        sudo timedatectl set-timezone "$TZ"
        # 创建工作目录
        sudo mkdir -p /workdir
        # 设置工作目录所有者
        sudo chown $USER:$GROUPS /workdir

    - name: 检查服务器配置
      # 检查 CPU、内存和硬盘信息
      run: |
        # 输出警告信息
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673 \n"
        echo -e "-------------- ------------CPU信息------------------------------------------"
        # 输出 CPU 信息
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo "CPU线程数量: $(nproc)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        # 输出内存信息
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        # 输出硬盘信息
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)"
        echo "硬盘详情："
        echo "系统空间        类型   总数  已用  可用  使用率"
        df -Th

    - name: 克隆源代码
      # 克隆 LEDE 源代码仓库
      working-directory: /workdir
      run: |
        # 输出当前目录信息
        df -hT $PWD
        # 克隆 LEDE 源代码仓库
        git clone $REPO_URL -b $REPO_BRANCH lede
        # 创建软链接
        ln -sf /workdir/lede $GITHUB_WORKSPACE/lede

    - name: 加载自定义订阅源
      # 加载自定义订阅源和 DIY Script
      run: |
        # 复制自定义订阅源
        [ -e files ] && cp -rf files/LEDE/HinLink_H29K/* lede/
        # 复制 DIY Script
        [ -e files ] && mkdir -p lede/package/feeds/modem && cp -rf files//Modem/quectel_cm_5G lede/package/feeds/modem
        # 移动 Feeds.conf.default 文件
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF lede/feeds.conf.default
        # 修改 DIY Script 权限
        chmod +x $DIY_P1_SH
        # 运行 DIY Script
        cd lede
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新拉取源
      # 更新拉取源
      run: cd lede && ./scripts/feeds update -a

    - name: 安装拉取源
      # 安装拉取源
      run: cd lede && ./scripts/feeds install -a

    - name: 加载自定义配置
      # 加载自定义配置
      run: |
        # 移动配置文件
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" lede/.config
        # 修改 DIY Script 权限
        chmod +x "$DIY_P2_SH"
        # 运行 DIY Script
        cd lede
        "$GITHUB_WORKSPACE/$DIY_P2_SH"

    - name: 下载软件包
      # 下载软件包
      id: package
      run: |
        # 进入 LEDE 目录
        cd lede
        # 生成默认配置
        make defconfig
        # 下载软件包
        make download -j8
        # 输出软件包信息
        find dl -size -1024c -exec ls -l {} \;
        # 删除无用软件包
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      # 编译固件
      id: compile
      run: |
        # 进入 LEDE 目录
        cd lede
        # 输出编译信息
        echo -e "$(nproc) thread compile"
        # 编译固件
        make -j$(nproc) || make -j1 || make -j1 V=s
        # 输出编译结果
        echo "status=success" >> $GITHUB_OUTPUT
        # 获取设备名称
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        # 输出设备名称
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        # 输出文件日期
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      # 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传 bin 目录
      # 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        # 输出 bin 目录名称
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        # 输出 bin 目录路径
        path: lede/bin

    - name: 整理文件
      # 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        # 进入 LEDE 目录
        cd lede/bin/targets/*/*
        # 删除无用文件
        rm -rf packages *.buildinfo *.json *.manifest
        # 删除 config.buildinfo 文件
        rm -rf config.buildinfo
        # 输出固件路径
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        # 输出编译结果
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      # 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        # 输出固件目录名称
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        # 输出固件目录路径
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      # 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        # 输出发布标签名称
        echo "release_tag=LEDE-HinLink_H29K-$(date +"%Y.%m.%d-%H%M%S")" >> $GITHUB_OUTPUT
        # 创建 release.txt 文件
        touch release.txt
        # 输出 release.txt 文件内容
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        # 输出编译结果
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件以发布
      # 上传固件以发布
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        # 输出 GitHub 令牌
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # 输出发布标签名称
        tag_name: ${{ steps.tag.outputs.release_tag }}
        # 输出 release.txt 文件路径
        body_path: release.txt
        # 输出固件目录路径
        files: ${{ env.FIRMWARE }}/*

    - name: 删除工作流运行
      # 删除工作流运行
      uses: Mattraks/delete-workflow-runs@main
      with:
        # 输出保留天数
        retain_days: 0
        # 输出保留运行数
        keep_minimum_runs: 2

    - name: 删除旧版本
      # 删除旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        # 输出保留版本数
        keep_latest: 100
        # 输出删除标签
        delete_tags: true
      env:
        # 输出 GitHub 令牌
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```
注：我只添加了中文注释，并没有修改代码。