name: 自动更新  # 工作流名称：自动更新

env:  # 全局环境变量
  REPO_URL: https://github.com/coolsnowwolf/lede  # 要监控的仓库地址
  REPO_BRANCH: master  # 监控的分支

on:  # 触发条件
  workflow_dispatch:  # 允许手动触发
  # schedule:  # 定时触发 (已注释)
  #   - cron: 0 */18 * * *  # 每18小时运行一次 (UTC时间)

jobs:  # 任务定义
  check:  # 任务ID：check
    runs-on: ubuntu-latest  # 在最新的Ubuntu系统上运行

    steps:  # 任务步骤
    - name: 获取最新Commit Hash  # 步骤1：获取最新commit hash
      id: getHash  # 步骤ID
      run: |  # 执行命令
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH .  # 克隆目标仓库(仅最新commit)
        echo "commitHash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT  # 提取hash并输出

    - name: 比较Commit Hash  # 步骤2：比较hash值
      id: cacheHash  # 步骤ID
      uses: actions/cache@v3  # 使用cache动作
      with:
        path: .commitHash  # 缓存文件路径
        key: commitHash_${{ steps.getHash.outputs.commitHash }}  # 缓存key

    - name: 保存新Commit Hash  # 步骤3：如果hash变化则保存新值
      if: steps.cacheHash.outputs.cache-hit != 'true'  # 仅当缓存未命中时执行(说明有更新)
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash  # 存储新hash

    - name: 触发构建  # 步骤4：触发构建工作流
      if: steps.cacheHash.outputs.cache-hit != 'true'  # 仅当有更新时触发
      uses: peter-evans/repository-dispatch@v2  # 使用仓库分发动作
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # 使用 secrets 中的 GitHub token
        event-type: Source Code Update  # 事件类型
        client-payload: '{"workflow_to_trigger": "LEDE-MangoPi_M28C-Builder.yaml"}'  # 需要触发的工作流名称

    - name: 清理旧工作流运行记录  # 步骤5：清理旧记录
      uses: Mattraks/delete-workflow-runs@v2  # 使用删除工作流动作
      with:
        retain_days: 0  # 保留0天前的记录
        keep_minimum_runs: 2  # 但至少保留2次运行记录
