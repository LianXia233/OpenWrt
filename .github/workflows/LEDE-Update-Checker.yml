name: "LEDE 更新检查器"

env:
  MONITOR_REPO_URL: https://github.com/coolsnowwolf/lede
  MONITOR_BRANCH: master
  TARGET_WORKFLOWS: "LEDE-MangoPi_M28C-Builder.yml"  # 修改为你实际的工作流文件名

on:
  workflow_dispatch:
  schedule:
    - cron: '0 20 * * *'  # 20:00 UTC (04:00 北京时间)

jobs:
  monitor_repo:
    name: "主要单元：监控仓库"
    runs-on: ubuntu-latest

    steps:
      # ----------------------- 系统初始化 -----------------------
      - name: "启动系统"
        run: |
          echo "==========================================="
          echo "          LEDE 更新检查器初始化..."
          echo "          $(date +'%Y-%m-%d %H:%M:%S')"
          echo "==========================================="
          echo ">> 加载核心模块..."
          sleep 0.5
          echo ">> 虚拟环境准备好"
          sleep 0.3

      # ----------------------- 实际工作流 -----------------------
      - name: "指纹扫描"
        id: scan
        run: |
          echo "==========================================="
          echo "分析目标仓库: ${{ env.MONITOR_REPO_URL }}"
          echo "==========================================="
          git clone --depth 1 ${{ env.MONITOR_REPO_URL }} -b ${{ env.MONITOR_BRANCH }} .
          current_hash=$(git rev-parse HEAD)
          echo "==========================================="
          echo "最新提交哈希: ${current_hash:0:7}...${current_hash: -7}"
          echo "==========================================="
          echo "commitHash=$current_hash" >> $GITHUB_OUTPUT

      - name: "指纹对比"
        id: cache_check
        uses: actions/cache@v3
        with:
          path: .commitHash
          key: commitHash_${{ steps.scan.outputs.commitHash }}

      - name: "保存新的指纹数据"
        if: steps.cache_check.outputs.cache-hit != 'true'
        run: |
          echo "==========================================="
          echo "更新指纹数据..."
          echo "==========================================="
          echo "${{ steps.scan.outputs.commitHash }}" | tee .commitHash
          echo "指纹数据更新成功"

      - name: "触发关联的工作流"
        run: |
          echo "==========================================="
          echo "调度中心收到指令，调度任务..."
          echo "事件名称: ${{ github.event_name }}"
          echo "目标工作流: ${{ env.TARGET_WORKFLOWS }}"
          echo "==========================================="

          if [ "${{ github.event_name }}" == "schedule" ]; then
            IFS=',' read -ra workflow_array <<< "${{ env.TARGET_WORKFLOWS }}"
            for workflow in "${workflow_array[@]}"; do
              workflow=$(echo $workflow | xargs)
              echo "触发工作流: $workflow"
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$workflow/dispatches" \
                -d "{\"ref\":\"master\",\"inputs\":{\"force_build\":\"true\"}}"
              sleep 1  # 避免触发频率过高
            done
          else
            echo "当前事件不是定时触发，不执行工作流调度"
          fi

      - name: "清理日志"
        if: always()
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 3
