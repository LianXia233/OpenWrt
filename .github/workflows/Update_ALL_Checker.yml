name: 多仓库自动更新监控
env:
  # 🟢 定义监控的仓库列表（JSON 格式）
  # 每个仓库需要配置：
  # - name: 仓库标识（简短英文）
  # - url: 仓库Git地址
  # - branch: 监控的分支
  # - event_type: 触发构建的唯一事件类型
  REPOSITORIES: |
    [
      {
        "name": "lede",
        "url": "https://github.com/coolsnowwolf/lede",
        "branch": "master",
        "event_type": "lede-source-updated"
      },
      {
        "name": "immortalwrt",
        "url": "https://github.com/immortalwrt/immortalwrt",
        "branch": "main",
        "event_type": "immortalwrt-source-updated"
      }
    ]

on:
  workflow_dispatch:  # 允许手动触发
  schedule:
    # 🟢 定时触发配置（UTC时间）
    # ⚠️ 注意：所有仓库共享同一个检查频率
    # - cron: "0 */6 * * *"  # 每6小时检查一次

jobs:
  check_updates:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：将环境变量中的JSON字符串转换为输出变量
      - name: 解析仓库配置
        id: repos
        run: |
          echo "repos_json=$REPOSITORIES" >> $GITHUB_OUTPUT
          # 🟢 $REPOSITORIES 是env中定义的JSON字符串
          # 🔄 输出到 steps.repos.outputs.repos_json

      # 步骤2：循环处理每个仓库
      - name: 遍历检查每个仓库
        uses: nick-invision/foreach@v2  # GitHub Action官方推荐的循环工具
        with:
          items: ${{ fromJson(steps.repos.outputs.repos_json) }}  # 解析JSON
          format: '{name}|{url}|{branch}|{event_type}'  # 定义数据分割格式
          run: |
            # 🟢 分割输入参数
            REPO_NAME=$(echo "${{ item }}" | cut -d'|' -f1)
            REPO_URL=$(echo "${{ item }}" | cut -d'|' -f2)
            REPO_BRANCH=$(echo "${{ item }}" | cut -d'|' -f3)
            EVENT_TYPE=$(echo "${{ item }}" | cut -d'|' -f4)

            echo "🔍 开始检查仓库: $REPO_NAME ($REPO_BRANCH)"
            
            # 操作1：克隆仓库（仅最新commit）
            git clone --depth 1 $REPO_URL -b $REPO_BRANCH $REPO_NAME
            cd $REPO_NAME
            
            # 操作2：获取最新Commit Hash
            CURRENT_HASH=$(git rev-parse HEAD)
            echo "最新Commit Hash: $CURRENT_HASH"
            
            # 🟢 检查Hash是否变化（使用actions/cache机制）
            CACHE_KEY="${REPO_NAME}-${REPO_BRANCH}-hash"  # ⚠️ 每个仓库用不同缓存key
            PREV_HASH=$(curl -s -H "Authorization: Bearer ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/caches" \
              | jq -r ".actions_caches[] | select(.key == \"$CACHE_KEY\") | .version" || echo "")
            
            if [[ "$PREV_HASH" != "$CURRENT_HASH" ]]; then
              echo "🔄 检测到更新！旧Hash: ${PREV_HASH:-无记录}, 新Hash: $CURRENT_HASH"
              
              # 操作3：保存新Hash到缓存（有效期7天）
              curl -X POST \
                -H "Authorization: Bearer ${{ github.token }}" \
                -H "Accept: application/vnd.github.everest-preview+json" \
                "https://api.github.com/repos/${{ github.repository }}/actions/caches" \
                -d '{"key":"'"$CACHE_KEY"'", "version":"'"$CURRENT_HASH"'"}'
              
              # 操作4：触发构建事件
              echo "🚀 触发构建事件: $EVENT_TYPE"
              curl -X POST \
                -H "Authorization: Bearer ${{ github.token }}" \
                -H "Accept: application/vnd.github.everest-preview+json" \
                "https://api.github.com/repos/${{ github.repository }}/dispatches" \
                -d '{"event_type":"'"$EVENT_TYPE"'", "client_payload":{"repo":"'"$REPO_NAME"'", "branch":"'"$REPO_BRANCH"'"}}'
            else
              echo "✅ 无更新，跳过触发"
            fi

      # 步骤3：清理旧工作流记录（保留最近2次）
      - name: 清理工作流记录
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0    # 保留0天前的记录
          keep_minimum_runs: 2  # 至少保留2次运行记录
